import matplotlib.pyplot as plt

# Données fournies
epochs = list(range(0, 44))  # 43 epochs in total

# Nouvelle série de données
training_loss = [
    5.290700, 2.068800, 1.588100, 1.253800, 1.106300, 1.068600, 0.873000, 
    0.749800, 0.686200, 0.640000, 0.563600, 0.570600, 0.486000, 0.485900, 
    0.514000, 0.453700, 0.425000, 0.441800, 0.323400, 0.247000, 0.145500, 
    0.077400, 0.107000, 0.090500, 0.090500, 0.073800, 0.059500, 0.035700, 
    0.043500, 0.026600, 0.015500, 0.019600, 0.010800, 0.010900, 0.013200, 
    0.001700, 0.007000, 0.002300, 0.001500, 0.002800, 0.001200, 0.001200, 
    0.002000, 0.005100
]

validation_loss = [
    2.359615, 1.771881, 1.363229, 1.475773, 1.366605, 1.258346, 1.022677, 
    0.928082, 0.922126, 1.039076, 1.033984, 0.967366, 0.944965, 1.048413, 
    0.958029, 0.898687, 0.929644, 0.831460, 0.697121, 0.574626, 0.497769, 
    0.607911, 0.514044, 0.559167, 0.478863, 0.551086, 0.560800, 0.569577, 
    0.498414, 0.525938, 0.532701, 0.429436, 0.489166, 0.515254, 0.436429, 
    0.408954, 0.460832, 0.461165, 0.442343, 0.463127, 0.475686, 0.450339, 
    0.439685, 0.377343
]

cer = [
    0.417671, 0.329317, 0.218876, 0.263052, 0.212851, 0.194779, 0.158635, 
    0.162651, 0.170683, 0.162651, 0.154618, 0.154618, 0.154618, 0.140562, 
    0.154618, 0.130522, 0.138554, 0.108434, 0.124498, 0.124498, 0.104418, 
    0.110442, 0.078313, 0.106426, 0.088353, 0.106426, 0.100402, 0.102410, 
    0.080321, 0.090361, 0.100402, 0.082329, 0.084337, 0.094378, 0.070281, 
    0.054217, 0.066265, 0.072289, 0.058233, 0.076305, 0.068273, 0.088353, 
    0.072289, 0.062249
]

# Tracer le graphique
plt.figure(figsize=(12, 6))
plt.plot(epochs, training_loss, label='Perte d\'entraînement', color='blue', marker='o')
plt.plot(epochs, validation_loss, label='Perte de validation', color='green', marker='x')
plt.plot(epochs, cer, label='CER', color='red', marker='s')

# Ajouter des étiquettes et un titre
plt.xlabel('Époques')
plt.ylabel('Valeurs')
plt.title('Perte d\'entraînement, perte de validation et CER au fil des époques')

# Ajouter une légende
plt.legend()

# Afficher le graphique
plt.grid(True)
plt.show()
